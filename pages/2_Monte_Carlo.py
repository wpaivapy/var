import streamlit as st
import numpy as np

# Configurar layout wide
st.set_page_config(page_title="Simula√ß√£o de VaR Monte Carlo", layout="wide")

# T√≠tulo do app
st.title("Simula√ß√£o de VaR Monte Carlo")

# Fun√ß√£o para formatar valores monet√°rios
def formatar_moeda(valor):
    return f"R$ {valor:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

# Entrada do valor da exposi√ß√£o sem formata√ß√£o (internamente)
valor_exposicao = st.number_input("Valor da Exposi√ß√£o (R$)", min_value=1_000_000, value=100_000_000, step=1_000_000)

# Entrada de outros par√¢metros
media_retorno = st.number_input("M√©dia de Retorno Di√°rio (%)", value=0.05) / 100
desvio_padrao = st.number_input("Volatilidade Di√°ria (%)", value=2.0) / 100
num_simulacoes = st.number_input("N√∫mero de Simula√ß√µes", min_value=1_000, value=100_000, step=1_000)
nivel_confianca = st.slider("N√≠vel de Confian√ßa (%)", min_value=90, max_value=99, value=95) / 100

# Bot√£o para calcular
if st.button("Calcular VaR"):
    # Gerar simula√ß√£o de retornos aleat√≥rios
    retornos_simulados = np.random.normal(media_retorno, desvio_padrao, num_simulacoes)

    # Calcular perdas simuladas
    perdas = valor_exposicao * retornos_simulados

    # Determinar o percentil do VaR
    var_monte_carlo = np.percentile(perdas, (1 - nivel_confianca) * 100)

    # Exibir resultado formatado
    st.markdown(f"### Resultado da Simula√ß√£o:")
    st.metric("Valor da Exposi√ß√£o", formatar_moeda(valor_exposicao))
    st.metric(f"VaR Monte Carlo ({int(nivel_confianca * 100)}% de confian√ßa)",
              formatar_moeda(abs(var_monte_carlo)))

    # Explica√ß√£o do VaR
    st.markdown(
        f"üîπ **O que significa esse resultado?**\n\n"
        f"O **VaR Monte Carlo ({int(nivel_confianca * 100)}% de confian√ßa)** indica que, em **{int(nivel_confianca * 100)}% dos casos**, "
        f"a perda **n√£o deve ultrapassar** {formatar_moeda(abs(var_monte_carlo))} em um √∫nico dia, considerando as premissas de volatilidade e retorno m√©dio."
    )
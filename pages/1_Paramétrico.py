import streamlit as st
import numpy as np
from scipy.stats import norm
import pandas as pd

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="C√°lculo de VaR Param√©trico", layout="wide")
st.title("C√°lculo de VaR Param√©trico")

st.write("""
O **Value at Risk (VaR) Param√©trico** estima a perda m√°xima potencial de um portf√≥lio com base em sua volatilidade 
di√°ria e um n√≠vel de confian√ßa, assumindo que os retornos seguem uma distribui√ß√£o normal. Insira os dados abaixo 
para calcular o VaR do seu portf√≥lio em um horizonte de tempo espec√≠fico!
""")

# Entrada do usu√°rio
st.subheader("Insira os dados do portf√≥lio")
valor_portfolio = st.number_input("üí∞ Valor do portf√≥lio (R$)", min_value=0.0, value=1000000.0, format="%.2f")
volatilidade_diaria = st.number_input("üìâ Volatilidade di√°ria (% por dia)", min_value=0.0, value=1.26, format="%.2f")
nivel_confianca = st.selectbox("üîç N√≠vel de confian√ßa", options=[0.90, 0.95, 0.99], index=1)
horizonte_tempo = st.number_input("üìÖ Horizonte de tempo (dias)", min_value=1, value=1, format="%d")

# Bot√£o para calcular
if st.button("üöÄ Calcular VaR"):
    # Convers√£o dos inputs
    volatilidade_horizonte = (volatilidade_diaria / 100) * np.sqrt(horizonte_tempo)  # Ajusta para o horizonte de tempo
    z_score = norm.ppf(nivel_confianca)  # Z-score correspondente ao n√≠vel de confian√ßa

    # C√°lculo do VaR
    var = valor_portfolio * volatilidade_horizonte * z_score
    var_percentual = (var / valor_portfolio) * 100

    # Exibi√ß√£o dos resultados
    st.subheader("üìä Resultado do VaR")
    st.success(f"‚úÖ **VaR ({nivel_confianca*100:.0f}% de confian√ßa):** R$ {var:,.2f}")
    st.write(f"**VaR percentual:** {var_percentual:.2f}% do valor do portf√≥lio")

    # Interpreta√ß√£o do resultado
    st.write("üîç **O que isso significa?**")
    st.write(f"""
    Com {nivel_confianca*100:.0f}% de confian√ßa, a perda m√°xima esperada do portf√≥lio em {horizonte_tempo} 
    dia(s) √© de R$ {var:,.2f}. Isso significa que h√° uma chance de {100 - nivel_confianca*100:.0f}% de as perdas 
    excederem esse valor, considerando a volatilidade di√°ria de {volatilidade_diaria:.2f}% e a distribui√ß√£o normal 
    dos retornos.
    """)
    st.write(f"""
    - **Volatilidade no horizonte:** {(volatilidade_horizonte*100):.2f}%  
    - **Z-score usado:** {z_score:.2f}
    """)

    # Gr√°fico simples da distribui√ß√£o
    st.subheader("üìà Visualiza√ß√£o da Distribui√ß√£o")
    x = np.linspace(-4, 4, 100)  # Z-scores para a curva normal
    y = norm.pdf(x, 0, 1)  # Densidade da normal padr√£o
    df = pd.DataFrame({"Z-score": x, "Densidade": y}).set_index("Z-score")
    st.line_chart(df)
    st.write(f"A linha vertical seria em {z_score:.2f}, delimitando o VaR na cauda esquerda.")

# Informa√ß√µes adicionais
st.markdown("""
### Como o VaR √© calculado?
O VaR param√©trico usa a f√≥rmula:  
**VaR = Valor do Portf√≥lio √ó Volatilidade no Horizonte √ó Z-score**  
- **Volatilidade no horizonte** = Volatilidade di√°ria √ó ‚àö(dias)  
- **Z-score** = Percentil da distribui√ß√£o normal para o n√≠vel de confian√ßa (ex.: 1,65 para 95%).  
""")

# Contato
st.markdown("""
Entre em contato comigo:  
üìß **E-mail:** william.paiva@outlook.com  
üì± **WhatsApp:** +55 11 98576-0234  
üîó **LinkedIn:** [William Paiva](https://www.linkedin.com/in/william-paiva-fin/)  
""")